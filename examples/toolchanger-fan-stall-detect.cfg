## Toolchanger fan stall detect (tachometer/rpm):
# Written by: MikeyMike (github: MikeYankeeOscarBeta) (Discord: dubiousmnemonic)
# Original single hotend fan rpm macro written by: alch3my#9819
# link to original: https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/macros/fan_tach_monitor.cfg

# Requires a 3-wire fan with tachometer_pin defined. https://www.klipper3d.org/Config_Reference.html#heater_fan
# The tach wire can be connected to a spare endstop pin. 
# Depending on what board you connect it to you might need to set pullup (^) on the tach pin (example: tachometer_pin: ^P1.29)

# Monitoring loop. Begins at Klipper start.
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 1
gcode:
    HOTEND_FAN_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

## TODO: rewrite this to handle all toolheads
# Change min_rpm and max_consecutive_stops to your desired values.
[gcode_macro HOTEND_FAN_CHECK]
#variable_he_stop_count: 0 #TODO: remove this, replace so it uses the one in the tools instead (tool_name.hotend_fan_stop_count)
gcode:
    {% set min_rpm = 1500|float %}
    {% set max_consecutive_stops = 3 %}

    #TODO: loop through tools here
    {% for tool_name in printer.toolchanger.tool_names %}
        
        ## TODO: remove these helper var overview
        # printer['toolchanger'].tool_numbers = [0, 1, 2, 3, 4]
        # printer['toolchanger'].tool_names = ['tool AVR0', 'tool AVR1', 'tool AVR2', 'tool AVR3', 'tool AVR4']
        # printer[tool].fan
        # printer['heater_fan AVR3_hotend_fan'].speed = 0.0
        # printer['heater_fan AVR3_hotend_fan'].rpm = 0.0
        # {% set tool = printer['tool ' + tn] %}
        # {% for tool_name in printer.toolchanger.tool_names %}
        #    {% if printer[tool_name]['extruder'] == params.HEATER %}

        #{% set fan_name = printer[tool].fan.split(' ')[1] %}
        
        {% set tn = tool_name.split(' ')[1] %}
        {% set tool = printer['tool ' + tn] %}
        {% set hotend_fan_name = 'heater_fan '+tn+'_hotend_fan'|string|lower %}

        #{% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
        {% set rpm = printer[hotend_fan_name].rpm|float %} # DONE?: get the right toolchanger fan
        #{% set rpm = printer['heater_fan AVR0_hotend_fan'].rpm|float %} #TODO: remove hardcode
        
        #{% set he_target = printer[printer.toolhead.extruder].target|float %}
        {% set he_target = printer[tool.extruder].target|float %} # DONE?: get the right toolchanger hotend target

        #{% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
        {% set he_temp = printer[tool.extruder].temperature|float %} # DONE?: get the right toolchanger extruder

        #{% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
        #{% set fan_on_temp = printer.configfile.settings[hotend_fan_name].heater_temp|float %} #DONE?: get the right toolchanger heater
        #{% set fan_on_temp = printer['configfile'].settings['heater_fan avr0_hotend_fan'].heater_temp|float %} #TODO: remove hardcode
        {% set fan_on_temp = printer['configfile'].settings[hotend_fan_name|string|lower].heater_temp|float %} #TODO: ??
        #{% set fan_on_temp = 0 %}

        #{% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}
        {% set hotend_fan_stop_count = printer["gcode_macro "+tn].hotend_fan_stop_count|int %} ## DONE?: replace with tool_name macro.hotend_fan_stop_count (e.g: AVR1.variable_hotend_fan_stop_count)

        #M118 Dumping fan stall vars: {tn|string +' : '+ tool|string +' : '+ hotend_fan_name|string +' : '+ rpm|string +' : '+ he_target|string +' : '+ he_temp|string +' : '+ fan_on_temp|string }
        #M118 Dumping fan stall vars: {tn|string +' : '+ hotend_fan_name|string +' : '+ rpm|string +' : '+ he_target|string +' : '+ he_temp|string +' : '+ fan_on_temp|string +' : '+ fan_on_temp_test|string }

        {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
            #SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
            SET_GCODE_VARIABLE MACRO={tn} VARIABLE=hotend_fan_stop_count VALUE={hotend_fan_stop_count + 1}
            M118 WARNING: Fan stoppage on {tn} detected ({hotend_fan_stop_count+1}/{max_consecutive_stops}). ##DONE?: add tool name to the error message
            M400
            #{% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            {% if printer["gcode_macro "+tn].hotend_fan_stop_count|int >= max_consecutive_stops-1 %}
                FAN_STOPPAGE_ROUTINE
            {% endif %}
        {% else %}
            #SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
            SET_GCODE_VARIABLE MACRO={tn} VARIABLE=hotend_fan_stop_count VALUE=0 ## DONE?: check the toolname macro instead (AVR0, AVR1, etc)
        {% endif %}
    {% endfor %}

# Insert the gcode that you want to run when a fan stoppage is detected.
# This runs every ~3 seconds until the stop conditions are cleared and the user resumes print
[gcode_macro FAN_STOPPAGE_ROUTINE]
gcode:
    # If not already paused
    #{% if printer['pause_resume'].is_paused|int == 0 %}
    {% if not printer.pause_resume.is_paused %}
        M117 !!ERROR: FAN STOPPAGE ON TOOL: {tn}!!
        M118 FAN STOPPAGE DETECTED. PAUSING...
        # TODO: figure out how to pause properly and save tool temperatures so they can be re-set once resumed
        #PAUSE
        #_TOOLCHANGER_CRASH_PAUSE  ## 
        # Turn off all hotends.
        # TODO: !! Don't forget to check if hotend gets turned back on before resume. !!
        {% set temps = [] %}
        SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=crashed VALUE=1
        SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_RESUME VARIABLE=active_tool VALUE={printer.tool_probe_endstop.active_tool_number}
        {% for tool_nr in printer.toolchanger.tool_numbers %}
            {% set toolname = printer.toolchanger.tool_names[tool_nr] %}
            {% set extruder = printer[toolname].extruder %}
            {% set temp = printer[extruder].target|default(0.0)|float %}
            {% set temps = temps.append(temp) %}
            M104 T{tool_nr} S0
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_RESUME VARIABLE=tool_temps VALUE='{temps}'
        
        PAUSE
        M117 paused
    {% endif %}